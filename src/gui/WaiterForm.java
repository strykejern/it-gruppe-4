/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WaiterForm.java
 *
 * Created on 02.nov.2010, 20:46:42
 */

package gui;

import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import system.*;

/**
 *
 * @author Anders
 */
public class WaiterForm extends javax.swing.JFrame {

    private MainFrame parent;

    private Order currentOrder;
    private boolean editCustomer;

    /** Creates new form WaiterForm */
    public WaiterForm(MainFrame parent) {
        this.parent = parent;

        initComponents();

        init();
    }

    private void init(){

        try {

            Menu menu = OrderDB.getMenu();

            DefaultListModel mod = new DefaultListModel();

            for (Dish dish : menu.getMenu()){
                mod.addElement(dish);
            }

            menuList.setModel(mod);
            dishOrderList.setModel(new DefaultListModel());
        }
        catch (SQLException e){
            System.out.println(e);
        }
        catch (Exception e){
            System.out.println(e);
        }

        bindTocustomerTextChanged(txtCustomerFirstName);
        bindTocustomerTextChanged(txtCustomerLastName);
        bindTocustomerTextChanged(txtCustomerPhone);
        bindTocustomerTextChanged(txtCustomerAddress);

        currentOrder = new Order();
        editCustomer = false;
    }

    private void bindTocustomerTextChanged(final JTextField field){
        field.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                customerTextChanged(field);
            }
            public void removeUpdate(DocumentEvent e) {
                
            }
            public void changedUpdate(DocumentEvent e) {
                customerTextChanged(field);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupCustomer = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        txtCustomerFirstName = new javax.swing.JTextField();
        txtCustomerLastName = new javax.swing.JTextField();
        txtCustomerPhone = new javax.swing.JTextField();
        txtCustomerAddress = new javax.swing.JTextField();
        checkBoxDelivery = new javax.swing.JCheckBox();
        checkBoxCustomAddress = new javax.swing.JCheckBox();
        txtCustomAddress = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        btnAddToOrder = new javax.swing.JButton();
        btnRemoveFromOrder = new javax.swing.JButton();
        btnEditComment = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDishComment = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        dishOrderList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        btnGetLastOrder = new javax.swing.JButton();
        btnPlaceOrder = new javax.swing.JButton();

        popupCustomer.setFont(txtCustomerFirstName.getFont());
        popupCustomer.setToolTipText("");
        popupCustomer.setFocusable(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Waiter");
        setMinimumSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                WaiterFormClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 75));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 75));

        txtCustomerFirstName.setFont(new java.awt.Font("Tahoma", 0, 14));
        txtCustomerFirstName.setForeground(java.awt.Color.lightGray);
        txtCustomerFirstName.setText("First Name");
        txtCustomerFirstName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtCustomerFirstName.setMinimumSize(new java.awt.Dimension(150, 20));
        txtCustomerFirstName.setName("First Name"); // NOI18N
        txtCustomerFirstName.setPreferredSize(new java.awt.Dimension(150, 20));
        txtCustomerFirstName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCustomerFieldMouseClicked(evt);
            }
        });
        txtCustomerFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusLost(evt);
            }
        });

        txtCustomerLastName.setFont(txtCustomerFirstName.getFont());
        txtCustomerLastName.setForeground(txtCustomerFirstName.getForeground());
        txtCustomerLastName.setText("Last Name");
        txtCustomerLastName.setBorder(txtCustomerFirstName.getBorder());
        txtCustomerLastName.setMinimumSize(new java.awt.Dimension(150, 20));
        txtCustomerLastName.setName("Last Name"); // NOI18N
        txtCustomerLastName.setPreferredSize(new java.awt.Dimension(150, 20));
        txtCustomerLastName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCustomerFieldMouseClicked(evt);
            }
        });
        txtCustomerLastName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusLost(evt);
            }
        });

        txtCustomerPhone.setFont(txtCustomerFirstName.getFont());
        txtCustomerPhone.setForeground(txtCustomerFirstName.getForeground());
        txtCustomerPhone.setText("Phone Number");
        txtCustomerPhone.setBorder(txtCustomerFirstName.getBorder());
        txtCustomerPhone.setMinimumSize(new java.awt.Dimension(150, 20));
        txtCustomerPhone.setName("Phone Number"); // NOI18N
        txtCustomerPhone.setPreferredSize(new java.awt.Dimension(150, 20));
        txtCustomerPhone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCustomerFieldMouseClicked(evt);
            }
        });
        txtCustomerPhone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusLost(evt);
            }
        });

        txtCustomerAddress.setFont(txtCustomerFirstName.getFont());
        txtCustomerAddress.setForeground(txtCustomerFirstName.getForeground());
        txtCustomerAddress.setText("Address");
        txtCustomerAddress.setBorder(txtCustomerFirstName.getBorder());
        txtCustomerAddress.setName("Address"); // NOI18N
        txtCustomerAddress.setPreferredSize(new java.awt.Dimension(105, 20));
        txtCustomerAddress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCustomerFieldMouseClicked(evt);
            }
        });
        txtCustomerAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusLost(evt);
            }
        });

        checkBoxDelivery.setFont(txtCustomerFirstName.getFont());
        checkBoxDelivery.setText("Delivery");
        checkBoxDelivery.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxDeliveryStateChanged(evt);
            }
        });

        checkBoxCustomAddress.setFont(txtCustomerFirstName.getFont());
        checkBoxCustomAddress.setText("Custom address");
        checkBoxCustomAddress.setEnabled(false);
        checkBoxCustomAddress.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxCustomAddressEnabledChanged(evt);
            }
        });
        checkBoxCustomAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCustomAddressStateChanged(evt);
            }
        });

        txtCustomAddress.setFont(txtCustomerFirstName.getFont());
        txtCustomAddress.setForeground(java.awt.Color.lightGray);
        txtCustomAddress.setText("Custom Address");
        txtCustomAddress.setBorder(txtCustomerFirstName.getBorder());
        txtCustomAddress.setEnabled(false);
        txtCustomAddress.setName("Custom Address"); // NOI18N
        txtCustomAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerFieldFocusLost(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkBoxDelivery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxCustomAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCustomerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomerAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxDelivery)
                    .addComponent(checkBoxCustomAddress)
                    .addComponent(txtCustomAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        menuList.setFont(new java.awt.Font("Courier New", 0, 12));
        menuList.setPreferredSize(new java.awt.Dimension(200, 80));
        jScrollPane1.setViewportView(menuList);

        jPanel2.add(jScrollPane1);

        jPanel4.setMaximumSize(new java.awt.Dimension(100, 32767));
        jPanel4.setMinimumSize(new java.awt.Dimension(70, 0));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 183));

        btnAddToOrder.setText("=>");
        btnAddToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToOrderActionPerformed(evt);
            }
        });

        btnRemoveFromOrder.setText("<=");
        btnRemoveFromOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFromOrderActionPerformed(evt);
            }
        });

        btnEditComment.setText("Comment");
        btnEditComment.setEnabled(false);
        btnEditComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCommentActionPerformed(evt);
            }
        });

        jLabel1.setText("Comments:");

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtDishComment.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        txtDishComment.setColumns(20);
        txtDishComment.setEditable(false);
        txtDishComment.setFont(new java.awt.Font("Tahoma", 0, 10));
        txtDishComment.setLineWrap(true);
        txtDishComment.setRows(5);
        jScrollPane3.setViewportView(txtDishComment);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnRemoveFromOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnEditComment, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAddToOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(btnAddToOrder)
                .addGap(68, 68, 68)
                .addComponent(btnRemoveFromOrder)
                .addGap(58, 58, 58)
                .addComponent(btnEditComment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel4);

        dishOrderList.setFont(new java.awt.Font("Courier New", 0, 12));
        dishOrderList.setPreferredSize(new java.awt.Dimension(200, 80));
        dishOrderList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dishOrderListSelectionChanged(evt);
            }
        });
        jScrollPane2.setViewportView(dishOrderList);

        jPanel2.add(jScrollPane2);

        getContentPane().add(jPanel2);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 45));
        jPanel3.setPreferredSize(new java.awt.Dimension(800, 45));

        btnGetLastOrder.setText("Get last order");
        btnGetLastOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetLastOrderActionPerformed(evt);
            }
        });

        btnPlaceOrder.setText("Place order");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGetLastOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 624, Short.MAX_VALUE)
                .addComponent(btnPlaceOrder)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetLastOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(btnPlaceOrder))
                .addContainerGap())
        );

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WaiterFormClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_WaiterFormClosed
        parent.setVisible(true);
    }//GEN-LAST:event_WaiterFormClosed

    private void txtCustomerFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerFieldFocusGained
        JTextField focusedTextField = (JTextField)evt.getSource();

        if (focusedTextField.getText().equals(focusedTextField.getName())){
            focusedTextField.setText("");
        }
        focusedTextField.setForeground(Color.black);

        customerTextChanged(focusedTextField);
    }//GEN-LAST:event_txtCustomerFieldFocusGained

    private void txtCustomerFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerFieldFocusLost
        JTextField focusedTextField = (JTextField)evt.getSource();

        if (focusedTextField.getText().equals("")){
            focusedTextField.setText(focusedTextField.getName());
            focusedTextField.setForeground(Color.lightGray);
        }

        popupCustomer.setVisible(false);
    }//GEN-LAST:event_txtCustomerFieldFocusLost

    private void checkBoxDeliveryStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxDeliveryStateChanged
        JCheckBox check = (JCheckBox)evt.getSource();

        if (check.isSelected()){
            checkBoxCustomAddress.setEnabled(true);
        }
        else {
            checkBoxCustomAddress.setEnabled(false);
            txtCustomAddress.setEnabled(false);
        }
    }//GEN-LAST:event_checkBoxDeliveryStateChanged

    private void checkBoxCustomAddressStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCustomAddressStateChanged
        JCheckBox check = (JCheckBox)evt.getSource();

        if (check.isEnabled()) {
            if (check.isSelected()) {
                txtCustomAddress.setEnabled(true);
            } else {
                txtCustomAddress.setEnabled(false);
            }
        }
    }//GEN-LAST:event_checkBoxCustomAddressStateChanged

    private void checkBoxCustomAddressEnabledChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxCustomAddressEnabledChanged
        JCheckBox check = (JCheckBox)evt.getSource();

        if (check.isEnabled()) {
            if (check.isSelected()) {
                txtCustomAddress.setEnabled(true);
            } else {
                txtCustomAddress.setEnabled(false);
            }
        }
    }//GEN-LAST:event_checkBoxCustomAddressEnabledChanged

    private void btnAddToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToOrderActionPerformed
        if (!menuList.isSelectionEmpty()){
            ListModel model = dishOrderList.getModel();

            DefaultListModel mod = convertToDefaultListModel(model);

            Dish selectedDish = (Dish)menuList.getSelectedValue();

            DishOrder toBeAdded = new DishOrder(selectedDish, 1, ""); // TODO: read comment from textBox

            mod.addElement(toBeAdded);

            dishOrderList.setModel(mod);
        }
    }//GEN-LAST:event_btnAddToOrderActionPerformed

    private DefaultListModel convertToDefaultListModel(ListModel list){
        DefaultListModel mod = new DefaultListModel();

        for (int i = 0; i < list.getSize(); ++i) {
            mod.addElement(list.getElementAt(i));
        }

        return mod;
    }

    private void customerTextChanged(JTextField invoker){
        if (invoker.hasFocus() && invoker.getText().length() > 0){
            try {
                ArrayList<Customer> customers = OrderDB.searchCustomer(txtCustomerFirstName.getText(), txtCustomerLastName.getText(), txtCustomerPhone.getText(), txtCustomerAddress.getText());

                if (customers.size() > 0){
                    popupCustomer.removeAll();

                    for (Customer cust : customers){
                        JMenuItem item = new JMenuItem(cust.toString());
                        item.setName(cust.id + ""); // TODO: maybe a cleaner way to do this ?

                        item.setFont(txtCustomerFirstName.getFont());

                        item.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                popupMenuItemSelected((JMenuItem)evt.getSource());
                            }
                        });

                        popupCustomer.add(item);
                    }

                    popupCustomer.setVisible(false);
                    popupCustomer.show(txtCustomerFirstName, 0, 20);
                }
            }
            catch (SQLException e){

            }
        }
    }

    private void popupMenuItemSelected(JMenuItem item){
        try {
            int customerId = Integer.parseInt(item.getName());
            Customer customer = OrderDB.getCustomerById(customerId);
            
            txtCustomerFirstName.setEnabled(false);
            txtCustomerLastName.setEnabled(false);
            txtCustomerPhone.setEnabled(false);
            txtCustomerAddress.setEnabled(false);

            txtCustomerFirstName.setText(customer.firstName);
            txtCustomerLastName.setText(customer.lastName);
            txtCustomerPhone.setText(customer.phoneNumber + "");
            txtCustomerAddress.setText(customer.address);

            currentOrder.setCustomer(customer);
        }
        catch (SQLException e) {

        }
    }

    private void btnRemoveFromOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFromOrderActionPerformed
        if (!dishOrderList.isSelectionEmpty()) {
            ListModel list = dishOrderList.getModel();

            DefaultListModel mod = convertToDefaultListModel(list);

            mod.removeElementAt(dishOrderList.getSelectedIndex());

            dishOrderList.setModel(mod);
        }
    }//GEN-LAST:event_btnRemoveFromOrderActionPerformed

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        ListModel list = dishOrderList.getModel();
        
        if (list.getSize() > 0){
            ArrayList<DishOrder> listOrders = new ArrayList<DishOrder>();

            for (int i = 0; i < list.getSize(); i++){
                dishOrderList.setSelectedIndex(i);
                listOrders.add((DishOrder)dishOrderList.getSelectedValue());
            }

            ArrayList<DishOrder> mergedListOrders = new ArrayList<DishOrder>();

            mainLoop: for (DishOrder order : listOrders){
                for (DishOrder compareOrder : mergedListOrders){
                    if (order.dishID == compareOrder.dishID &&
                            order.comments.equals(compareOrder.comments)){
                        compareOrder.amount++;
                        continue mainLoop;
                    }
                }
                mergedListOrders.add(order.clone());
            }

            if (currentOrder.getCustomer() == null){
                try {
                    basicValidateCustomer();

                    Customer newCustomer = new Customer(txtCustomerFirstName.getText(), txtCustomerLastName.getText(), txtCustomerPhone.getText(), txtCustomerAddress.getText());

                    try {
                        OrderDB.newCustomer(newCustomer);
                    }
                    catch (SQLException e) {
                        // TODO: catch ?
                        System.out.println(e);
                    }

                    currentOrder.setCustomer(newCustomer);
                }
                catch (IllegalArgumentException e){
                    JOptionPane.showMessageDialog(this, e.getMessage());
                    return;
                }
            }
            else if (editCustomer){
                try {
                    basicValidateCustomer();
                }
                catch (IllegalArgumentException e){
                    JOptionPane.showMessageDialog(this, e.getMessage());
                    return;
                }

                Customer tmpCustomer = new Customer(
                        currentOrder.getCustomer().id,
                        txtCustomerFirstName.getText(),
                        txtCustomerLastName.getText(),
                        Integer.parseInt(txtCustomerPhone.getText()),
                        txtCustomerAddress.getText());

                String updateRequest = "Are you sure you want to edit customer:\n" +
                        currentOrder.getCustomer() + "\nTo:\n" +
                        tmpCustomer; // TODO: set to the update request

                int answer = JOptionPane.showConfirmDialog(this, updateRequest, "Update customer", JOptionPane.OK_CANCEL_OPTION);

                if (answer == JOptionPane.OK_OPTION){
                    // TODO: update current customer in database
                }
                else {
                    return;
                }
            }
            // otherwise just keep the selected customer

            currentOrder.setDishes(mergedListOrders);

            if (checkBoxDelivery.isSelected()){
                currentOrder.setToBeDelivered();

                if (checkBoxCustomAddress.isSelected() &&
                        txtCustomAddress.getText().length() > 1){ // TODO: maybe more?
                    currentOrder.setDeliveryAddress(txtCustomAddress.getText());
                }
            }

            // TODO: place the order
            try {
            OrderDB.createOrder(currentOrder);
            }
            catch (SQLException e){
                System.out.println("Failed to place order:\n" + e);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "You need to order something");
        }
    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void basicValidateCustomer(){
        if (txtCustomerFirstName.getText().equals(txtCustomerFirstName.getName())) throw new IllegalArgumentException("You need to fill in the first name");
        if (txtCustomerLastName.getText().equals(txtCustomerLastName.getName())) throw new IllegalArgumentException("You need to fill in the last name");
        if (txtCustomerPhone.getText().equals(txtCustomerPhone.getName())) throw new IllegalArgumentException("You need to fill in the phonenumber");
        if (txtCustomerAddress.getText().equals(txtCustomerAddress.getName())) throw new IllegalArgumentException("You need to fill in the address");
    }

    private void txtCustomerFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCustomerFieldMouseClicked
        JTextField focusedTextField = (JTextField)evt.getSource();
        customerTextChanged(focusedTextField);
    }//GEN-LAST:event_txtCustomerFieldMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        currentOrder.setCustomer(null);

        txtCustomerFirstName.setEnabled(true);
        txtCustomerLastName.setEnabled(true);
        txtCustomerPhone.setEnabled(true);
        txtCustomerAddress.setEnabled(true);

        txtCustomerFirstName.setText("");
        txtCustomerLastName.setText("");
        txtCustomerPhone.setText("");
        txtCustomerAddress.setText("");

        txtCustomerAddress.requestFocusInWindow();
        txtCustomerLastName.requestFocusInWindow();
        txtCustomerPhone.requestFocusInWindow();
        txtCustomerFirstName.requestFocusInWindow();

        editCustomer = false;
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (currentOrder.getCustomer() != null) {
            txtCustomerFirstName.setEnabled(true);
            txtCustomerLastName.setEnabled(true);
            txtCustomerPhone.setEnabled(true);
            txtCustomerAddress.setEnabled(true);

            txtCustomerAddress.requestFocusInWindow();
            txtCustomerLastName.requestFocusInWindow();
            txtCustomerPhone.requestFocusInWindow();
            txtCustomerFirstName.requestFocusInWindow();

            editCustomer = true;
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void dishOrderListSelectionChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dishOrderListSelectionChanged
        if (dishOrderList.getSelectedIndices().length > 0){
            btnEditComment.setEnabled(true);
            Object[] dishes = dishOrderList.getSelectedValues();
            if (dishes.length > 1){
                DishOrder dish = (DishOrder)dishes[0];
                String bufferComment = dish.comments;
                for (Object o : dishes){
                    dish = (DishOrder)o;
                    if (bufferComment == null){
                        if (dish.comments != null){
                            txtDishComment.setText("Multiple comments found");
                            return;
                        }
                    }
                    else if (!dish.comments.equals(bufferComment)){
                        txtDishComment.setText("Multiple comments found");
                        return;
                    }
                }
                txtDishComment.setText(bufferComment != null && bufferComment.length() > 1 ? bufferComment : "No comment");
            }
            else {
                DishOrder dish = (DishOrder)dishes[0];
                txtDishComment.setText(dish.comments != null && dish.comments.length() > 1 ? dish.comments : "No comment");
            }
        }
        else {
            btnEditComment.setEnabled(false);
            txtDishComment.setText("No dishes selected");
        }
    }//GEN-LAST:event_dishOrderListSelectionChanged

    private void btnEditCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCommentActionPerformed
        if (dishOrderList.getSelectedIndices().length > 0){
            ArrayList<DishOrder> dishes = new ArrayList<DishOrder>();

            String commonComment;

            Object[] elements = dishOrderList.getSelectedValues();
            DishOrder dish = (DishOrder)elements[0];
            if (dish.comments == null){
                commonComment = "";
            }
            else {
                commonComment = dish.comments;
                for (int i = 1; i < elements.length; i++) {
                    dish = (DishOrder)elements[i];
                    if (dish.comments == null || !dish.comments.equals(commonComment)){
                        commonComment = "";
                        break;
                    }
                }
            }

            String comment = JOptionPane.showInputDialog(this, "Write the comment for the selected dishes");

            for (Object o : elements){
                dish = (DishOrder)o;
                dish.setComments(comment);
                dishes.add(dish);
            }

            dishOrderList.setSelectedIndices(dishOrderList.getSelectedIndices());
        }
    }//GEN-LAST:event_btnEditCommentActionPerformed

    private void btnGetLastOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetLastOrderActionPerformed
        new WaiterGetOldOrdersChooser(this).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnGetLastOrderActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToOrder;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEditComment;
    private javax.swing.JButton btnGetLastOrder;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JButton btnRemoveFromOrder;
    private javax.swing.JCheckBox checkBoxCustomAddress;
    private javax.swing.JCheckBox checkBoxDelivery;
    private javax.swing.JList dishOrderList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList menuList;
    private javax.swing.JPopupMenu popupCustomer;
    private javax.swing.JTextField txtCustomAddress;
    private javax.swing.JTextField txtCustomerAddress;
    private javax.swing.JTextField txtCustomerFirstName;
    private javax.swing.JTextField txtCustomerLastName;
    private javax.swing.JTextField txtCustomerPhone;
    private javax.swing.JTextArea txtDishComment;
    // End of variables declaration//GEN-END:variables

}
