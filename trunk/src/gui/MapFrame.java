/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MapFrame.java
 *
 * Created on 17.nov.2010, 10:52:51
 */
package gui;

import org.w3c.dom.Document;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import org.jdesktop.swingx.mapviewer.GeoPosition;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.net.URLEncoder;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.JXMapKit.DefaultProviders;
import org.w3c.dom.NodeList;
import system.FetchedOrder;
import system.OrderDB;

/**
 * This class creates the frame for the Driverwindow, and initializes all components. 
 * By default it sets the maplocation to the location specified in the dummyobject unSelected.
 * The region-variable sets the region for where the map will search for addresses.
 * If no address is found, it will default to the region-variable, which contains
 * "Trondheim".
 * @author Audun
 */
public class MapFrame extends javax.swing.JFrame implements GUIUpdater {

    private DefaultListModel model;
    private String latitude = null;
    private String longitude = null;
    private int undoId = -1;
    private String noOrderSelected = "No order has been selected.";
    private MainFrame parent;
    private UpdaterThread updater;
    private String region = "Trondheim";
    private int prevSelectedIndex = -1;
    private final FetchedOrder unSelected = new FetchedOrder(0, 0, "Trondheim",
            FetchedOrder.View.DRIVER, "");

    /** Creates new form MapFrame */
    public MapFrame(MainFrame parent) {
        this.parent = parent;

        initComponents();
        initMapSettings();
        setExtendedState(getExtendedState() | MAXIMIZED_BOTH);
        init();
    }
    /**
     * Initializes the updater that keeps the ordersToDeliverList updated with
     * the newest deliveres from the database.
     */
    private void init() {// GUI updater with 10 second interval
        updater = new UpdaterThread(this, 10 * 1000);
        updater.start();
    }
    /**
     * Customizes the map with the preferred settings, and sets the
     * startposition for the map.
     */
    private void initMapSettings() {
        mapView.setDefaultProvider(DefaultProviders.OpenStreetMaps);
        mapView.setMiniMapVisible(false);
        mapView.setZoom(3);
        mapView.setAddressLocation(getCoords(unSelected));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapView = new org.jdesktop.swingx.JXMapKit();
        jPanel1 = new javax.swing.JPanel();
        recieptButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersToDeliverList = new javax.swing.JList();
        deliveredButton = new javax.swing.JButton();
        addressField = new javax.swing.JTextField();
        findAddressButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        recieptButton.setText("Reciept");
        recieptButton.setToolTipText("Gets the reciept for the selected order.");
        recieptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                recieptButtonMouseReleased(evt);
            }
        });

        undoButton.setText("Undo Delivered");
        undoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                undoButtonMouseReleased(evt);
            }
        });

        ordersToDeliverList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ordersToDeliverList.setToolTipText("Contains the orders that need delivery.");
        ordersToDeliverList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ordersToDeliverListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ordersToDeliverList);

        deliveredButton.setText("Delivered");
        deliveredButton.setToolTipText("Removes the selected order.");
        deliveredButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deliveredButtonMouseReleased(evt);
            }
        });

        findAddressButton.setText("Find Address");
        findAddressButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                findAddressButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(deliveredButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recieptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(undoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addComponent(findAddressButton, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addComponent(addressField, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliveredButton)
                    .addComponent(recieptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(undoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(findAddressButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mapView, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mapView, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * If the value selected in the orderlist changes, this method refreshes the
     * map and the addressLabel with the new address. If the value selected has
     * not changed it will return without doing anything.
     * @param evt
     */
    private void ordersToDeliverListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ordersToDeliverListValueChanged
        if (prevSelectedIndex == -1 && getSelectedOrder() != null) {
            try {
                mapView.setAddressLocation(getCoords(getSelectedOrder()));
                addressField.setText(getSelectedOrder().getDeliveryAddress());
            } catch (SQLException e) {

            }catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(null, "Error connecting to mapservice: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_ordersToDeliverListValueChanged
    /**
     * Opens a message dialog containing the reciept for the selected item.
     * @param evt
     */
    private void recieptButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recieptButtonMouseReleased
        JOptionPane.showMessageDialog(null, getSelectedOrderReciept());
    }//GEN-LAST:event_recieptButtonMouseReleased
    /**
     * Makes sure that the main menu apears when exiting the window
     * @param evt
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        parent.setVisible(true);
        updater.end();
    }//GEN-LAST:event_formWindowClosed

    /**
     * Runs orderDelivered using the selected order, if any.
     * @param evt
     */
    private void deliveredButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliveredButtonMouseReleased
        orderDelivered(getSelectedOrder());
    }//GEN-LAST:event_deliveredButtonMouseReleased
    /**
     * Runs undoOrderDelivered.
     * @param evt
     */
    private void undoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_undoButtonMouseReleased
        undoOrderDelivered();
    }//GEN-LAST:event_undoButtonMouseReleased
    /**
     * Uses the address in the addressField and sets the map to point to
     * the new location if possible.
     * @param evt
     */
    private void findAddressButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findAddressButtonMouseReleased
        mapView.setAddressLocation(getCoords(new FetchedOrder(0, null,
                addressField.getText(), FetchedOrder.View.DRIVER, "")));
    }//GEN-LAST:event_findAddressButtonMouseReleased
    /**
     * The method that is called automatically by a GUIUpdater thread. Will make
     * sure the selected order in the ordersToDeliverList stays the same, if any
     * value is selected.
     */
    public void updateGUI() {
        prevSelectedIndex = ordersToDeliverList.getSelectedIndex();
        try {
            setOrdersToDeliverModel();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * A manual updater method. The difference from updateGUI is that manualUpdateGUI
     * will not try to keep the selected order selected, since it will only be run after
     * modifying the database.
     */
    public void manualUpdateGUI() {
        try {
            setOrdersToDeliverModel();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * Retrieves a FetchedOrder ArrayList from OrderDB, 
     * then adds all the objects in a model, 
     * then finally sets the model to the orderToDeliverList.
     */
    private void setOrdersToDeliverModel() {
        ArrayList<FetchedOrder> undeliveredList;
        try {
            undeliveredList = OrderDB.getDriverOrders();
        } catch (SQLException e) {
            throw new IllegalArgumentException("Unable to retrieve list of objects.");
        }

        model = new DefaultListModel();

        for (FetchedOrder i : undeliveredList) {
            model.addElement(i);
        }

        ordersToDeliverList.setModel(model);
        if (prevSelectedIndex != -1) {
            //checks to see if there was a selected value in a previous model.
            //If true, it sets the selected value in this model to be 
            //the same as the last one.
            ordersToDeliverList.setSelectedIndex(prevSelectedIndex);
            prevSelectedIndex = -1;
        }
    }

    /**
     * Gets the reciept for the selected order, then returns it as a string.
     * If no order has been selected, this method will return the message
     * contained in the noOrderSelected variable.
     * @return
     */
    private String getSelectedOrderReciept() {
        if (ordersToDeliverList.getSelectedValue() != null) {
            FetchedOrder temp =
                    (FetchedOrder) ordersToDeliverList.getSelectedValue();
            try {
                return temp.getReciept();
            } catch (SQLException e) {
                throw new IllegalArgumentException("Error getting reciept: "
                        + e);
            }
        }
        return noOrderSelected;
    }

    /**
     * Return the selected order from the ordersToDeliverList. 
     * If no order is selected, it will throw an exception.
     * @return
     */
    private FetchedOrder getSelectedOrder() {
        try {
            return (ordersToDeliverList.getSelectedValue() != null
                    ? (FetchedOrder) ordersToDeliverList.getSelectedValue() : null);

        } catch (Exception e) {
            throw new IllegalArgumentException("No order is selected.");
        }
    }

    /**
     * Sets the FetchedOrder to delivered, then reloads the list containing the 
     * undelivered orders. Sets the variable undoId to the index of the order in
     * the database, so that the last delivered order can be retrieved incase the
     * user clicks deliver by mistake.
     * @param o
     */
    private void orderDelivered(FetchedOrder o) {
        try {

            OrderDB.setOrderAsDone(o.getId());
            undoId = o.getId();

        } catch (SQLException e) {
            throw new IllegalArgumentException(e.getMessage());
        }
        addressField.setText("");
        manualUpdateGUI();
    }

    /**
     * Undos a orderDelivered call, setting the object to undelivered, if 
     * undoId == -1, no object has been delivered as of this session, and the
     * method will return without doing anything.
     * @param o
     */
    private void undoOrderDelivered() {
        if (undoId != -1) {
            try {
                OrderDB.undoSetOrderAsDone(undoId);
                undoId = -1;
            } catch (SQLException e) {
                throw new IllegalArgumentException(e.getMessage());
            }
            manualUpdateGUI();
        }
    }

    /**
     * Takes a FetchedOrder object, extracts the delivery address, then converts
     * the delivery address with the help of the Yahoo-whereis service.
     * Returns a GeoPosition object containing the latitude and longitude of the
     * position.
     * @param o
     * @return 
     */
    public GeoPosition getCoords(FetchedOrder o) {

        try {
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            String address = URLEncoder.encode(o.getDeliveryAddress(), "UTF-8");
            Document xml = builder.parse("http://where.yahooapis.com/geocode?q="
                    + address + "+" + region);  //sends a query containing the address.
            latitude = getLat(xml);
            longitude = getLong(xml);
            return new GeoPosition(Double.parseDouble(latitude),
                    Double.parseDouble(longitude));
        } catch (Exception e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Extracts the longitude from a Document object,
     * and returns a String containing the value.
     * @param doc
     * @return
     */
    private String getLong(Document doc) {
        try {
            NodeList nodeList = doc.getElementsByTagName("longitude");
            return nodeList.item(0).getTextContent();
        } catch (Exception e) {
            throw new IllegalArgumentException("Longitude error: " + e);
        }

    }

    /**
     * Extracts the latitude from a Document object,
     * and returns a String containing the value.
     * @param doc
     * @return
     */
    private String getLat(Document doc) {
        try {
            NodeList nodeList = doc.getElementsByTagName("latitude");
            return nodeList.item(0).getTextContent();
        } catch (Exception e) {
            throw new IllegalArgumentException("Latitude error: " + e);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JButton deliveredButton;
    private javax.swing.JButton findAddressButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXMapKit mapView;
    private javax.swing.JList ordersToDeliverList;
    private javax.swing.JButton recieptButton;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
