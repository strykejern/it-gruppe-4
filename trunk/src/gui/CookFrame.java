/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CookFrame.java
 *
 * Created on 08.nov.2010, 17:41:02
 */

package gui;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import system.DishOrder;
import system.FetchedOrder;
import system.Order;
import system.OrderDB;

/**
 *
 * @author Anders
 */
public class CookFrame extends javax.swing.JFrame implements GUIUpdater{

    private MainFrame parent;
    private UpdaterThread updater;

    /** Creates new form CookFrame */
    public CookFrame(MainFrame parent) {
        this.parent = parent;

        initComponents();

        init();
    }

    private void init(){
        updater = new UpdaterThread(this, 10 * 1000); // GUI updater with 10 second interval
        updater.start();
    }

    public void updateGUI() {
        try {
            JList focused = null;
            if (orderList.hasFocus()) focused = orderList;
            else if (dishList.hasFocus()) focused = dishList;

            ArrayList<FetchedOrder> orders = OrderDB.getCooksOrders();
            FetchedOrder selectedOrder = (FetchedOrder)orderList.getSelectedValue();

            DefaultListModel orderModel = new DefaultListModel();

            for (FetchedOrder order : orders){

                orderModel.addElement(order);

                if (selectedOrder != null && order.equals(selectedOrder)) {
                    DishOrder selectedDish = (DishOrder)dishList.getSelectedValue();

                    DefaultListModel dishModel = new DefaultListModel();
                    for (DishOrder dish : order.getDishes()) {
                        dishModel.addElement(dish);
                    }
                    dishList.setModel(dishModel);
                    dishList.setSelectedValue(selectedDish, false);
                }
            }

            orderList.setModel(orderModel);
            orderList.setSelectedValue(selectedOrder, false);

            if (focused != null){
                focused.requestFocusInWindow();
            }
        }
        catch (SQLException e) {

        }
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderInfoPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        dishList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        orderInfoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        orderInfoPanel.setMaximumSize(new java.awt.Dimension(350, 32767));
        orderInfoPanel.setMinimumSize(new java.awt.Dimension(350, 100));
        orderInfoPanel.setPreferredSize(new java.awt.Dimension(350, 578));

        javax.swing.GroupLayout orderInfoPanelLayout = new javax.swing.GroupLayout(orderInfoPanel);
        orderInfoPanel.setLayout(orderInfoPanelLayout);
        orderInfoPanelLayout.setHorizontalGroup(
            orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );
        orderInfoPanelLayout.setVerticalGroup(
            orderInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );

        orderList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                orderListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(orderList);

        jScrollPane2.setViewportView(dishList);

        jLabel1.setText("Orders");

        jLabel2.setText("Dishes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
                    .addComponent(orderInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        parent.setVisible(true);
        updater.end();
    }//GEN-LAST:event_formWindowClosed

    private void orderListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_orderListValueChanged
        FetchedOrder selectedOrder = (FetchedOrder)orderList.getSelectedValue();
        if (selectedOrder != null) {

            DefaultListModel dishModel = new DefaultListModel();
            for (DishOrder dish : selectedOrder.getDishes()) {
                dishModel.addElement(dish);
            }
            dishList.setModel(dishModel);
        }
    }//GEN-LAST:event_orderListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList dishList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel orderInfoPanel;
    private javax.swing.JList orderList;
    // End of variables declaration//GEN-END:variables

}
