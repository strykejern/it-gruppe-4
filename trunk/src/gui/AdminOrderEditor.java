/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdminOrderEditor.java
 *
 * Created on 14.nov.2010, 15:33:16
 */

package gui;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import system.AdminCustomer;
import system.DishOrder;
import system.FetchedOrder;
import system.OrderDB;

/**
 *
 * @author Anders
 */
public class AdminOrderEditor extends javax.swing.JFrame implements GUIUpdater {

    JFrame parent;

    UpdaterThread guiUpdater;

    SimpleDateFormat format;

    /** Creates new form AdminOrderEditor */
    public AdminOrderEditor(JFrame parent) {
        this.parent = parent;

        initComponents();

        format = new SimpleDateFormat("yyyy-MM-dd");

        txtDate.setText(format.format(new Date()));

        guiUpdater = new UpdaterThread(this, 10 *1000);
        guiUpdater.start();

        txtDate.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                guiUpdater.manualUpdate();
            }

            public void removeUpdate(DocumentEvent e) {
                guiUpdater.manualUpdate();
            }

            public void changedUpdate(DocumentEvent e) {
                guiUpdater.manualUpdate();
            }
        });


        setExtendedState(getExtendedState() | MAXIMIZED_BOTH);
    }

    public void updateGUI() {
        try {

            int count = 0;
            int index = selectNumRows.getSelectedIndex();
            if (index < 3){
                count = (int)Math.pow(2, index) * 20;
            }

            boolean before = selectBeforeAfter.getSelectedIndex() == 0;

            format.parse(txtDate.getText());

            ListSelectionModel orderSelection = orderList.getSelectionModel();
            ListSelectionModel dishSelection = dishList.getSelectionModel();

            ArrayList<FetchedOrder> orders = OrderDB.getAdminOrders(count, txtDate.getText() + " " + selectTime.getSelectedItem(), before); // TODO: use input
            FetchedOrder selectedOrder = (FetchedOrder)orderList.getSelectedValue();

            DefaultListModel orderModel = new DefaultListModel();

            for (FetchedOrder order : orders){

                orderModel.addElement(order);

                if (selectedOrder != null && order.equals(selectedOrder)) {
                    DishOrder selectedDish = (DishOrder)dishList.getSelectedValue();

                    DefaultListModel dishModel = new DefaultListModel();
                    for (DishOrder dish : order.getDishes()) {
                        dishModel.addElement(dish);
                    }
                    dishList.setModel(dishModel);
                    dishList.setSelectionModel(dishSelection);
                }
            }

            orderList.setModel(orderModel);

            orderList.setSelectionModel(orderSelection);
        }
        catch (SQLException e) {
            System.out.println(e);
        }
        catch (ParseException e){
            
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        dishList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        selectNumRows = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        selectBeforeAfter = new javax.swing.JComboBox();
        txtDate = new javax.swing.JTextField();
        selectTime = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDishComment = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCustomer = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtOrderedTime = new javax.swing.JTextField();
        btnDeleteOrder = new javax.swing.JButton();
        btnReciept = new javax.swing.JButton();
        selectDone = new javax.swing.JCheckBox();
        selectMade = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        orderList.setFont(new java.awt.Font("Courier New", 0, 11));
        orderList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        orderList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                orderListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(orderList);

        dishList.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        dishList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dishList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dishListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(dishList);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Orders");

        selectNumRows.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "20", "40", "80", "All" }));
        selectNumRows.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectNumRowsItemStateChanged(evt);
            }
        });

        jLabel2.setText("Number of orders to show:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        selectBeforeAfter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Before", "After" }));
        selectBeforeAfter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectBeforeAfterItemStateChanged(evt);
            }
        });

        txtDate.setText("yyyy-MM-dd");

        selectTime.setMaximumRowCount(12);
        selectTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "02.00", "04.00", "06.00", "08.00", "10.00", "12.00", "14.00", "16.00", "18.00", "20.00", "22.00", "24.00" }));
        selectTime.setSelectedIndex(11);
        selectTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectTimeItemStateChanged(evt);
            }
        });

        jLabel3.setText("From");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectNumRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(selectBeforeAfter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(selectTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(selectBeforeAfter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selectTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(selectNumRows)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtDishComment.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        txtDishComment.setColumns(20);
        txtDishComment.setEditable(false);
        txtDishComment.setFont(new java.awt.Font("Tahoma", 0, 11));
        txtDishComment.setLineWrap(true);
        txtDishComment.setRows(5);
        jScrollPane3.setViewportView(txtDishComment);

        jLabel4.setText("Comment");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Selected order info");

        jLabel6.setText("Customer:");

        txtCustomer.setEditable(false);

        jLabel7.setText("Address:");

        txtAddress.setEditable(false);

        jLabel8.setText("Ordered at:");

        txtOrderedTime.setEditable(false);

        btnDeleteOrder.setText("Delete order");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        btnReciept.setText("Show reciept");
        btnReciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecieptActionPerformed(evt);
            }
        });

        selectDone.setText("Done");
        selectDone.setEnabled(false);

        selectMade.setText("Made");
        selectMade.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOrderedTime, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(txtCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnDeleteOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectMade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectDone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReciept)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtOrderedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteOrder)
                    .addComponent(selectDone)
                    .addComponent(selectMade)
                    .addComponent(btnReciept))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        parent.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void orderListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_orderListValueChanged
        FetchedOrder selectedOrder = (FetchedOrder)orderList.getSelectedValue();
        if (selectedOrder != null) {
            try {
                AdminCustomer customer = new AdminCustomer(selectedOrder.getCustomer());

                txtCustomer.setText(customer.toString());

                txtAddress.setText(customer.getAddress());

                txtOrderedTime.setText(selectedOrder.getTimeStamp());

                DefaultListModel dishModel = new DefaultListModel();
                for (DishOrder dish : selectedOrder.getDishes()) {
                    dishModel.addElement(dish);
                }
                dishList.setModel(dishModel);

                selectMade.setSelected(OrderDB.checkMade(selectedOrder.getId()));

                selectDone.setSelected(OrderDB.checkDone(selectedOrder.getId()));
            }
            catch (SQLException e){
                JOptionPane.showMessageDialog(this, "Error fetching order from database:\n" + e.getMessage());
            }
        }
    }//GEN-LAST:event_orderListValueChanged

    private void dishListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dishListValueChanged
        DishOrder selectedDish = (DishOrder)dishList.getSelectedValue();
        if (selectedDish != null){
            if (selectedDish.getComment() != null && selectedDish.getComment().length() > 2){
                txtDishComment.setText(selectedDish.getComment());
            }
            else {
                txtDishComment.setText("No comment");
            }
        }
    }//GEN-LAST:event_dishListValueChanged

    private void selectNumRowsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectNumRowsItemStateChanged
        guiUpdater.manualUpdate();
    }//GEN-LAST:event_selectNumRowsItemStateChanged

    private void selectTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectTimeItemStateChanged
        guiUpdater.manualUpdate();
    }//GEN-LAST:event_selectTimeItemStateChanged

    private void selectBeforeAfterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectBeforeAfterItemStateChanged
        guiUpdater.manualUpdate();
    }//GEN-LAST:event_selectBeforeAfterItemStateChanged

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        FetchedOrder order = (FetchedOrder)orderList.getSelectedValue();
        if (order == null) return;

        int answer = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the currently selected order?", "Delete order", JOptionPane.OK_CANCEL_OPTION);
        if (answer == JOptionPane.CANCEL_OPTION) return;

        try {
            OrderDB.deleteOrder(order);

            guiUpdater.manualUpdate();
        }
        catch (SQLException e) {

        }
    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void btnRecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecieptActionPerformed
        FetchedOrder order = (FetchedOrder)orderList.getSelectedValue();
        if (order == null) return;

        try {
            String reciept = OrderDB.getReciept(order.getId());
            JOptionPane.showMessageDialog(this, reciept);
        }
        catch (SQLException e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnRecieptActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnReciept;
    private javax.swing.JList dishList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList orderList;
    private javax.swing.JComboBox selectBeforeAfter;
    private javax.swing.JCheckBox selectDone;
    private javax.swing.JCheckBox selectMade;
    private javax.swing.JComboBox selectNumRows;
    private javax.swing.JComboBox selectTime;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextArea txtDishComment;
    private javax.swing.JTextField txtOrderedTime;
    // End of variables declaration//GEN-END:variables

}
